#showme READING basecontroller
#class {basecontroller} {open};

/************************************************************
	Flags to show what was detected
************************************************************/
#var found[player] 0;
#var found[gold] 0;
#var found[item] 0;
#var found[mob] 0;
#var found[nonPartyPlayer] 0;

/************************************************************
	Values of various events. For example if a mob was found,
	the value event[foundMobName] will be filled. If a player was
	followed, the value $followed will be filled out.
	If a wimply occured, the $wimpyDirection is filled out
************************************************************/
#var event[followed] {};
#var event[following] {};
#var event[followDirection] {};
#var event[wimpyDirection] {};
#var event[failedAttack] {};
#var event[otherPlayer] {};
#var event[foundMobName] {};
#var event[attackedBy] {};
#var event[mobAttacked] {};
#var event[itemDropped] {};
#var event[itemTaken] {};
#var event[items] {};
#var event[lastItemFound] {};

/************************************************************
	Register events
************************************************************/
.registerEvent onMobKilled onMobKilledBase;
.registerEvent onPrompt onPromptBase;
.registerEvent onEnteredRoom onEnteredRoomBase;
.registerEvent onExitedRoom onExitedRoomBase;
.registerEvent onDebugLog onDebugLogBase;

#event {CLASS DESTROYED bot}
{
	.unregisterEvent onEnteredRoom onEnteredRoomBase;
	.unregisterEvent onExitedRoom onExitedRoomBase;
	.unregisterEvent onDebugLog onDebugLogBase;
};

/************************************************************
	Initialize
************************************************************/
prompt >$nl$;
.mapOff;

/************************************************************
	Debug log
************************************************************/
#alias onDebugLogBase
{
	.showHeader BaseController;
	#var found;
	#var event;

	#if {$found[mob]} 
	{
		.showSetting {Found Mob Name} {"$event[foundMobName]"};
	};

	#if { $found[nonPartyPlayer] || $playerFound } 
	{
		.showSetting {Other Player} {"$event[otherPlayer]"};
	};
};

/************************************************************
	A prompt is received, this is a chance to act

	Sometimes it is useful to collect ALL the information
	in between prompts before deciding what to do. It may
	Seem like a simple idea to 'get all' everytime an item
	is seen in the callbacks. However, if there are 9 items
	in the room, this will call get all; 9 times. 

	It is better to wait until every this known and do a single
	get all call.
************************************************************/
#action {^>$} 
{
	.triggerEvent onPrompt;
};

/************************************************************
	Detects when gold is found
************************************************************/
#action { gold coins.$}
{
	#var found[gold] 1;
	.triggerEvent onGoldFound;
};

/************************************************************
	Detects when an Item is found
************************************************************/
#action {^=A= %*.$} 
{
	#var found[item] 1;

	#var itemFound %1;
	#replace itemFound {{ \\x7B.*\\x7D}} {};
	#replace itemFound {{\(.*\)}} {};
	#replace itemFound {{\[.*\]}} {};	

	#list {event[items]} {add} {$itemFound};
	#var event[lastItemFound] $itemFound;
	.triggerEvent onItemFound;
};

/************************************************************
	Detects when an Item is found
************************************************************/
#action {^=W= %*.$} 
{
	#var found[item] 1;

	#var itemFound %1;
	#replace itemFound {{ \\x7B.*\\x7D}} {};
	#replace itemFound {{\(.*\)}} {};
	#replace itemFound {{\[.*\]}} {};	

	#list {event[items]} {add} {$itemFound};
	#var event[lastItemFound] $itemFound;
	.triggerEvent onItemFound;
};


#function isFilteredFromLogging
{
	#if { @startsWith{{%0}{The ghostly remnant of}} } { #return 1; };
    #if { @startsWith{{%0}{The bashed up}} } { #return 1; };
	#if { @startsWith{{%0}{The sliced up}} } { #return 1; };
	#if { @startsWith{{%0}{The brainless}} } { #return 1; };	
	#if { @containsNoCase{{%0}{slain corpse}} } { #return 1; };
	#if { @containsNoCase{{%0}{stinking remains}} } { #return 1; };
	#if { @containsNoCase{{%0}{coins}} } { #return 1; };

	#return 0;
};

/************************************************************
	Famous items we should discount as items
************************************************************/
#function isFilteredFromPickup
{
    #if { @startsWith{{%0}{The bashed up}} } { #return 1; };
	#if { @startsWith{{%0}{The sliced up}} } { #return 1; };
	#if { @startsWith{{%0}{The brainless}} } { #return 1; };		
	#if { @startsWith{{%0}{slain corpse}} } { #return 1; };
	#if { @startsWith{{%0}{A sign}} } { #return 1; };
	#if { @startsWith{{%0}{Talon Airship}} } { #return 1; };
	#if { @startsWith{{%0}{board containing}} } { #return 1; };
	#if { @startsWith{{%0}{A Black Tank}} } { #return 1; };
	#if { @startsWith{{%0}{A large sign}} } { #return 1; };
	#if { @startsWith{{%0}{A Trashcan}} } { #return 1; };

	#return 0;
};

/************************************************************
	Detects when an Item is found
************************************************************/
#action {^=I= %*.$} 
{
	#if { !@isFilteredFromPickup{%0} }
	{
		#var found[item] 1;
		#var itemFound %1;
		#replace itemFound {{ \\x7B.*\\x7D}} {};
		#replace itemFound {{\(.*\)}} {};
		#replace itemFound {{\[.*\]}} {};	
	

		#list {event[items]} {add} {$itemFound};
		#var event[lastItemFound] $itemFound;
		
		.triggerEvent onItemFound;
	};
}

/************************************************************
	Detects a monster
************************************************************/
#action {^=M= %*.$}
{
	#var found[mob] 1;
	#var event[foundMobName] %1;

	#if { @containsNoCase{{%0}{attacking you}} }
	{
		#local attackedBy @substr{{%1}{0}{@indexOf{{%1}{attacking you}}}};
		#var event[attackedBy] $attackedBy;
		#var event[foundMobName] $attackedBy;
	};

	#replace event[foundMobName] {{\\x7B.*\\x7D}} {};
    #replace event[foundMobName] {{\(.*\)}} {};
    #replace event[foundMobName] {{\[.*\]}} {};	
	#format {event[foundMobName]} {%p} {$event[foundMobName]};
	.triggerEvent onMobFound;

	#if { $settings[acceptMissions] && !$traveller[isTravelling] }
	{
		#if { @containsNoCase{{$event[foundMobName]}{\<\?\>}}}
		{
			mission ask;
		};

		#if { @containsNoCase{{$event[foundMobName]}{\<\!\>}}}
		{
			mission return;
		};
	};
};

/************************************************************
	Detects missions
************************************************************/
#action {^You have been offered the mission}
{
	#if { $settings[acceptMissions] }
	{
		mission accept;
	}

	.triggerEvent onOfferedMission;
}

/************************************************************
	To detect when a monster is killed, we could compare
	the value in %1 to the character name
************************************************************/
#action {^=K=%1 dealt the killing blow to %2\.} 
{
	#if {@equalsIgnoreCase{{$char[ourCharacter]}{%1}}}
	{
		#var event[mobKilled] %2;
		.triggerEvent onMobKilled;
	};

	#if { "%1" == "%2" }
	{
		#var event[mobKilled] %2;
		.triggerEvent onMobKilled;
	};


} {1};

/************************************************************
	Detect other players
************************************************************/
#action {^=P= %*} 
{
	#NOP {Any player detected};
	#var found[player] 1;
	#var event[otherPlayer] %1;

	#NOP {Non party member detected};
	#var simplifiedParty $party;
	#list simplifiedParty simplify;
	#var isInParty 0;
	#foreach {$simplifiedParty} {partyMember} 
	{
		#REGEX {%0} {$partyMember} {#var isInParty 1;}
	};
	
	#if { !${isInParty} }
	{
		#var found[nonPartyPlayer] 1;
	}

	.triggerEvent onPlayerFound;
} {6};


/************************************************************
	We attacked
************************************************************/
#action {You attack %1\.} 
{
	#var event[mobAttacked] %1;
	.triggerEvent onMobAttacked;
};

/************************************************************
	We attacked
************************************************************/
#action {You are already attacking that} 
{
	#var event[mobAttacked] $event[attackedBy];
	.triggerEvent onMobAttacked;
};

/************************************************************
	Detect hostile aggro
************************************************************/
#action {%1 charges forward to attack.%*}
{
	#var event[attackedBy] %1;
	.triggerEvent onPlayerAttacked;
}

/************************************************************
	Detect hostile aggro
************************************************************/
#action {%1 arrives hunting%*}
{
	#var event[attackedBy] %1;
	.triggerEvent onPlayerAttacked;
};

/*************************************************************
	On room seen
*************************************************************/
#action {^=S=}
{
	.triggerEvent onRoomSeen;
};

/************************************************************
	Detect hostile aggro
************************************************************/
#action {%1 attacking you.%*}
{
	#var event[attackedBy] %1;
	.triggerEvent onPlayerAttacked;
};

/************************************************************
	Detect a failed attack, most likely due to misspelled
	target names... 
************************************************************/
#action {^There is no %1 here.$}
{
	#if { !@containsNoCase{{%1}{reason to}} }
	{
		#var event[failedAttack] %1;
		.triggerEvent onFailedAttack;
	};
};

/************************************************************
	Player followed someone
************************************************************/
#action {%w leaves following %w\.}
{
	#format {whichPlayer} {%l} {%1};
	#format {otherPlayer} {%2} {%2};

 	#if { "$whichPlayer" == "$char[ourCharacter]" }
	{
		#var event[following] $otherPlayer;
		.triggerEvent onFollowerFollowed;
	};
};

/************************************************************
 	Detect a follower leaving the room
************************************************************/
#action {%1 leaves %2\.} 
{
	#format {whichPlayer} {%l} {%1};
	
	#if { "$whichPlayer" == "$event[followed]" }
	{
		#var event[followDirection] %2;

		#switch {"$event[followDirection]"} 
		{
			#case {"north"}			{#var event[followDirection] n};
			#case {"south"}			{#var event[followDirection] s};
			#case {"east"}			{#var event[followDirection] e};
			#case {"west"}			{#var event[followDirection] w};
			#case {"down"}			{#var event[followDirection] d};
			#case {"up"}			{#var event[followDirection] u};
			#case {"northeast"} 	{#var event[followDirection] ne};
			#case {"northwest"}		{#var event[followDirection] nw};
			#case {"southeast"}		{#var event[followDirection] se};
			#case {"southwest"}		{#var event[followDirection] sw};
			#case {"through the portal"}	{#var event[followDirection] enter portal};
			#default 	#var event[followDirection] %2
		};

		.triggerEvent onFollowerLeft;
	};
};

/************************************************************
	Detect wimpy
************************************************************/
#action {^Your legs run away with you %w.} 
{
	#var event[wimpyDirection] %1;
	.triggerEvent onWimpy;
};

/*************************************************************
  Detect unfollowing someone
*************************************************************/
#action {^You are no longer following %w\.} 
{
	#if {"%1" == "$following"} 
	{
		#unvar following;
	}

	.triggerEvent onPlayerUnfollowed;
};

/************************************************************
 	Detect Following someone
************************************************************/
#action {^%w begins to follow %w\.} 
{
	#format {whichPlayer} {%l} {%1};
	#if {"$whichPlayer" == "$char[ourCharacter]"} 
	{
		#var {event[followed]} {%2};
	};

	.triggerEvent onPlayerFollowed;
};

/*************************************************************
	Detect blocked exits in general. 
*************************************************************/
#action {^You cannot go } 
{
	.triggerEvent onFailedMovement;

};

/*************************************************************
 	Detect blocked exits in general. 
*************************************************************/
#action {^You cannot get it up.} 
{
	.triggerEvent onFailedMovement;
};

/*************************************************************
    Detect item taken
*************************************************************/
#action {%1: Taken.$}
{
    #REGEXP {%1} {coins} { #NOP {nothing};} 
    {
		#var event[itemTaken] %1;
		removeItemFromList {event[items]} {$event[itemDropped]};
		.triggerEvent onItemTaken;
    };
};

/*************************************************************
    Detect item taken
*************************************************************/	
#action {%1: Ok.$}
{
    #REGEXP {%1} {gold coins} { #NOP {nothing}; } 
    {
		#var event[itemTaken] %1;
		removeItemFromList {event[items]} {$event[itemDropped]};
		.triggerEvent onItemTaken;
    };
};

/*************************************************************
    Detect item dropped
*************************************************************/
#action {^You drop %1.$}
{
    #REGEXP {%1} {gold coins} { #NOP {nothing};} 
    {    
		#var event[itemDropped] %1;
		#list {event[items]} {ADD} {$event[itemDropped]};
		.triggerEvent onItemDropped;
    };
};

/*************************************************************
    Detect item dropped
*************************************************************/
#action {drop: %1$}
{
	#var event[itemDropped] %1;
	#list {event[items]} {ADD} {$event[itemDropped]};
	.triggerEvent onItemDropped;
};

/*************************************************************
    Detect item dropped
*************************************************************/
#action {^It is too dark.$}
{
	.triggerEvent onDarkness;
}

/*************************************************************
	Helper call, when we look at something or glance
	we want to clear what we know about the world, since
	what we are about to see will be a better truth than 
	what we have seen in the past.
*************************************************************/
#alias {.clearData}
{
	.triggerEvent onClearData;

	#var found[nonPartyPlayer] 0;
	#var found[player] 0;
	#var found[gold] 0;
	#var found[item] 0;
	#var found[mob] 0;

	#var event[otherPlayer] {};
	#var event[foundMobName] {};
	#list event[items] clear;	
};

/*************************************************************
 TinTin Events, redraw the map when the map data changes
*************************************************************/
#alias {onEnteredRoomBase} 
{
	.clearData;
};

/*************************************************************
 TinTin Events, redraw the map when the map data changes
*************************************************************/
#alias {onExitedRoomBase} 
{
	
	#var event[rating] {};
	.clearData;
};

/************************************************************
 We received a prompt
************************************************************/
#alias onPromptBase
{
	#if { $settings[shouldVacuum] && !$found[player] } 
	{
		.doBehaviorVacuum;
	};
};

/************************************************************
	Vacuum
************************************************************/
#alias .doBehaviorVacuum
{
	#if { $found[gold] }
	{
		#send !get coins;
		#var found[gold] 0;
	};

	#if { $found[item] && !$traveller[isTravelling] && $currentRoomID >= 200 }
	{
		#send !get all;
		#var found[item] 0;
	};
};

/************************************************************
	Default behaviors for various events
************************************************************/
#alias onMobKilledBase
{
	#var event[mobAttacked] {};
	#var event[foundMobName] {};

	#if { !$found[player] }
	{
		#if { $settings[shouldLoot] }
		{
			#send take all from corpse;
			#send take coins from corpse;
		};
	
		#if { $settings[shouldProcessCorpse] }
		{
			#send wrap;
		};
    
		#if { $settings[shouldLoot] }
		{
			#send get coins;
			#var found[gold] 0;
		};
	}
};

/************************************************************
	Detect TinTin's end of #path walking
************************************************************/
#action {#PATH WALK: #END OF PATH} 
{
	.triggerEvent onPathFinished;
}

/************************************************************
	Maybe another player picked them up or they got reset
	between the time we saw them and the time we tried to 
	get them. Update our flag
************************************************************/
#action {There is no coins here.}
{
	#var found[gold] 0;
}

/*************************************************************************
	Detect monster rating
*************************************************************************/
#action {^Monster class: %d}
{
	#var event[rating] %1;
};

#action {Monster class: Really Big \(%d\)} 
{
	#var event[rating] %1; 
};

#action {Your dungeon scaler is currently set to level: %1}
{
	#var scaler %1;
};

/************************************************************
	If we are looking and glancing, lets not waste an 
	opportunity to clear our data
************************************************************/
#alias {glance}
{
	.clearData;
	#send !glance;
};

#alias {gl}
{
	glance;
};

#alias {look%0}
{
	.clearData; 
	#send !look%0;
};

#alias {ls%*}
{
	look;
};

#alias {l}
{
	look;
};

#alias {dogtank} {#alias {kill} {#delay {2} {dog sicem %%0}}}
#alias {nodogtank} {#unalias {kill}};

#var halt 2

#class {basecontroller} {close}
