#class {monk} {open}

/* Set Guild Variable */
#var guild Monk

/* Initialize Variables */
#var monk[g2n][prev] 0
#var monk[speed] {};
#var monk[power] {};

.registerEvent onPreKilledMob onMobKilledMonk;
.registerEvent onMobAttacked onMobAttackedMonk;


/**********************************************************************************
	Read speed and power from guild score
**********************************************************************************/
#action {Combat Method: %1 Speed: %2 Power: %3 Chi Focus: %4}
{
	#local speed {};
	#local power {};

	#format speed {%p} {%2};
	#format power {%p} {%3};

	#var monk[speed] $speed;
	#var monk[power] $power;
};

/* HP Bars */
#NOP Default Monk HP Bar
#act {HP: %d/%d PP: %d/%d Chi: %d/%d G2:{[\d\-]+} Mind: %d AE:%d/%d%% CF:%w} 
{
	#var {my[hp][current]}	{%1};
	#var {my[hp][max]}	{%2};
	#var {my[sp][current]}	{%3};
	#var {my[sp][max]}	{%4};
	#var {my[gp1][current]}	{%5};
	#var {my[gp1][max]}	{%6};
	#var {my[g2n]}		{%7};
	#var {my[gp2][current]}	{%8};
	#var {my[ae][current]}	{%9};
	#var {my[ae][reset]}	{%10};
	#var {my[cf]}		{%11}
}

/*************************************************************************
	Detect monk pressure
*************************************************************************/
#action {^You find a pressure point and bore down!$}
{
	#var monk[pressure] 1;
};

/*************************************************************************
	Detect monk palm
*************************************************************************/
#action {^You reach out and touch your foe, sending death bringing vibrations}
{
	#var monk[palm] 1;
};


#NOP Initialization for Monk Gline Variables
#var monk[gxp][count] 50
#var monk[gxp][average] 0
#list {monk[gxp][history][list]} create {}

#ALIAS {.mipProcessGlineMonk} {
        #IF {%1 == 1} {
		#REGEX {$mip[gline][1]} {<868>Method<099>: <838>%w<099>{?:\s+}<868>Crits<099>: <{?:\d+}>%w<099>{?:\s+}<868>Stun<099>: <{?:\d+}>%w<099>{?:\s+}<868>Hide<099>: <{?:\d+}>%w<099>} {
			#var	{monk[method]}		{&1};
			#var	{monk[crits]}		{&2};
			#var	{monk[stun]}		{&3};
			#var	{monk[hide]}		{&4}
		};
		#REPLACE {mip[gline][1]} {    } {  }
        }; #ELSEIF {%1 == 2} {
		#REGEX {$mip[gline][2]} {G2N: <838>%d<099>{?:\s+}<868>Chi Focus<099>: <{?:\d+}>%w<099>{?:\s+}<838>AE<099>: <{\d+}>%d<099>/%d%%} {
			#var	{monk[g2n][prev]}	{$monk[g2n][current]};
			#var	{monk[g2n][current]}	{&1};
			#var	{monk[chifocus]}	{&2};
			#var	{monk[ae][current]}	{&3};
			#var	{monk[ae][reset]}	{&4};
			#math	{monk[gxp][last]}	{$monk[g2n][prev] - $monk[g2n][current]};
			#list {monk[gxp][history][list]} {size} {monk[gxp][history][size]};
			#if {$monk[gxp][history][size] >= $monk[gxp][count]} {
				#list {monk[gxp][history][list]} del 1
			};
			#list {monk[gxp][history][list]} add $monk[gxp][last];
			#var monk[gxp][history][simple] $monk[gxp][history][list];
			#list monk[gxp][history][simple] simplify;
			#var monk[gxp][history][total] 0;
			#foreach {$monk[gxp][history][simple]} {cnt} {
				#math {monk[gxp][history][total]} {$monk[gxp][history][total] + $cnt}
			};
			#math {monk[gxp][average]} {$monk[gxp][history][total] / $monk[gxp][history][size]};
			#format {monk[gxp][last_col]}	{%+3s} {$monk[gxp][last]};
			#if {$monk[gxp][average] > 0} {
				#math {monk[g2n][rounds]} {$monk[g2n][current] / $monk[gxp][average]}
			};
			#math {monk[gxp][day]}	{$monk[g2n][rounds] / 43200};
			#math {monk[gxp][hour]}	{$monk[g2n][rounds] % 43200 / 1800};
			#math {monk[gxp][min]}	{$monk[g2n][rounds] % 1800 / 30};
			#math {monk[gxp][sec]}	{$monk[g2n][rounds] % 30 * 2};
			#if {$monk[gxp][day] > 0} {
				#var {monk[gxp][time]} {<120>${monk[gxp][day]}<020>d <120>${monk[gxp][hour]}<020>h<099>}
			}; #elseif {$monk[gxp][hour] > 0} {
				#var {monk[gxp][time]} {<120>${monk[gxp][hour]}<020>h <120>${monk[gxp][min]}<020>m<099>}
			}; #elseif {$monk[gxp][min] > 0} {
				#var {monk[gxp][time]} {<120>${monk[gxp][min]}<020>m <120>${monk[gxp][sec]}<020>s<099>}
			}; #else {
				#var {monk[gxp][time]} {<120>${monk[gxp][sec]}<020>s<099>}
			}
		};
		#REPLACE {mip[gline][2]} {G2N: <838>%d<099>} {G2N: <838>&1<099>[<138>${monk[gxp][last_col]}<099>][${monk[gxp][time]}]};
		#REPLACE {mip[gline][2]} {    } {  }
        }; #ELSE {
                #ECHO {<171> Invalid Gline Number <088>}
        }
}


/* Update Status Alias */
#alias {.renderMonkBar} 
{
	#if {"$cooler" == "on" || $corpses[cooler] > 0} {
	#format {sb1_cooler} {%+2s} {$corpses[cooler]};
			#var {sb1_cooler} { CL:<130>$sb1_cooler<088>}
	} {
			#var {sb1_cooler} {}
	};
	#if {"$freezer" == "on" || $corpses[freezer] > 0} 
	{
			#format {sb2_freezer} {%+2s} {$corpses[freezer]};
			#var {sb2_freezer} { FZ:<130>$sb2_freezer<088>}
	};
	#else
	{
			#var {sb2_freezer} {}
	};

	#var    {my[hp][graph]}         {@graph{$my[hp][current];${my[hp][max]}}};
	#var    {my[sp][graph]}         {@graph{$my[sp][current];$my[sp][max]}};
	#var    {my[gp1][graph]}        {@graph{$my[gp1][current];$my[gp1][max]}};
	#var    {my[gp2][graph]}        {@graph{$my[gp2][current];$my[gp2][max]}};
	#var    {enemy[graph]}          {@graph{$enemy[hp];100}};
	#format {hp}                    {%+4s} {$my[hp][current]};
	#format {hp_max}                {%+4s} {$my[hp][max]};
	#format {sp}                    {%+4s} {$my[sp][current]};
	#format {sp_max}                {%+4s} {$my[sp][max]};
	#format {gp1}                   {%+4s} {$my[gp1][current]};
	#format {gp1_max}               {%+4s} {$my[gp1][max]};
	#format {gp2}                   {%+4s} {$my[gp2][current]};
	#format {gp2_max}               {%+4s} {$my[gp2][max]};
	#format {ehealth}               {%+7s} {$enemy[hp]%%};
	#format {corpses[inventory]}	{%+2s} {$corpses[inventory]};
	#format {corpses[coffin]}	{%+2s} {$corpses[coffin]};
	#if {"$draw[hpbar]" == "on"} 
	{
		#showme {HP:$hp/$hp_max SP:$sp/$sp_max Chi:$gp1/$gp1_max  P:$gp2/$gp2_max  E:$ehealth    IC:<130>${corpses[inventory]}<088>${sb1_cooler}} {-4};
		#showme {H:$my[hp][graph] S:$my[sp][graph] Chi:$my[gp1][graph] P:$my[gp2][graph] E:$enemy[graph] CF:<130>${corpses[coffin]}<088>${sb2_freezer}} {-3}
	};
	
	#if {"$draw[gline]" == "on"} 
	{
		#showme {$mip[gline][1]  $mip[gline][2]} {-6}
	}
};

#alias {onMobAttackedMonk}
{
	pressure;
	palm;
}

#alias {onMobKilledMonk}
{
	study corpse;
};

#class {monk} {close}
