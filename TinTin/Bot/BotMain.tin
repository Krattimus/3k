#showme READING BOTMAIN
#class {bot} {open};

/************************************************************
	Core behavior settings
************************************************************/
#var autoSell on;
#var corpseDonations on;
#var shouldVacuum 0;
#var shouldLoot 0;
#var shouldProcessCorpse 1;
#var nonPartyPlayerFound 0;

/************************************************************
	Flags to show what was detected
************************************************************/
#var otherPlayerFound 0;
#var playerFound 0;
#var goldFound 0;
#var itemFound 0;
#var mobFound 0;
#var playerAttacked 1;

/************************************************************
	Values of various events. For example if a mob was found,
	the value foundMobName will be filled. If a player was
	followed, the value $followed will be filled out.
	If a wimply occured, the $wimpyDirection is filled out
************************************************************/
#var followed {};
#var following {};
#var followDirection {};
#var wimpyDirectionDirection {};
#var failedAttack {};
#var otherPlayer {};
#var foundMobName {};
#var shouldKill {};
#var attackedBy {};
#var itemDropped {};
#var itemTaken {};
#var items {};
/************************************************************
	Register events
************************************************************/
.registerEvent onKilledMob onKilledMobBotResponder;
.registerEvent onPrompt onPromptBotResponder;
.registerEvent onEnteredRoom onEnteredRoomBotResponder;
.registerEvent onExitedRoom onExitedRoomBotResponder;
.registerEvent onDebugLog onDebugLogBotResponder;

#event {CLASS DESTROYED bot}
{
	.unregisterEvent onKilledMob onKilledMobBotResponder;
	.unregisterEvent onPrompt onPromptBotResponder;
	.unregisterEvent onEnteredRoom onEnteredRoomBotResponder;
	.unregisterEvent onExitedRoom onExitedRoomBotResponder;
	.unregisterEvent onDebugLog onDebugLogBotResponder;
};

/************************************************************
	Initialize
************************************************************/
prompt >$nl$;
mapoff;
#send !pwho;
#send coins;

/************************************************************
	Debug log
************************************************************/
#alias onDebugLogBotResponder
{
	.showHeader Main;
	.showSetting {Current Controller} "$currentController";
	.showSetting {Stopped Controller} "$stoppedController";
	.showSetting {Resume Controller} "$resumeController";
	.showSetting {Gold Found} $goldFound;
	.showSetting {Item Found} $itemFound;
	.showSetting {Mob Found} $mobFound;
	.showSetting {Player Attacked} $playerAttacked;
	.showSetting {Player Found} $playerFound;
	.showSetting {NonParty Found} $nonPartyPlayerFound;

	#if {$mobFound} 
	{
		.showSetting {Found Mob Name} {"$foundMobName"};
	};

	#if {$playerAttacked}
	{
		.showSetting {Attacked By} {$attackedBy};
	};

	#if { $nonPartyPlayerFound || $playerFound } 
	{
			.showSetting {Other Player} {"$otherPlayer"};
	};
};

/************************************************************
	A prompt is received, this is a chance to act

	Sometimes it is useful to collect ALL the information
	in between prompts before deciding what to do. It may
	Seem like a simple idea to 'get all' everytime an item
	is seen in the callbacks. However, if there are 9 items
	in the room, this will call get all; 9 times. 

	It is better to wait until every this known and do a single
	get all call.
************************************************************/
#action {^>$} 
{
	.triggerEvent onPrompt;
}

/************************************************************
	Detects when gold is found
************************************************************/
#action { gold coins.$} 
{
	.triggerEvent onGoldFound;
}

/************************************************************
	Detects when an Item is found
************************************************************/
#action {^=A= %*} 
{
	#var foundItem 1;
	#list {items} {add} {%1};

	.triggerEvent onItemFound;
}

/************************************************************
	Detects when an Item is found
************************************************************/
#action {^=W= %*} 
{
	#var foundItem 1;
	#list {items} {add} {%1};

	.triggerEvent onItemFound;
}

/************************************************************
	Detects when an Item is found
************************************************************/
#action {^=I= %*} 
{
	#var foundItem 1;
	#list {items} {add} {%1};
	
	.triggerEvent onItemFound;
}

/************************************************************
	Detects a monster
************************************************************/
#action {^=M=%1$}
{
	#var foundMob 1;
	#var foundMobName %1;

	.triggerEvent onMonsterFound;
};

/************************************************************
	To detect when a monster is killed, we could compare
	the value in %1 to the character name
************************************************************/
#action {^=K=%1 dealt the killing blow to} 
{
	.triggerEvent onKilledMob;
} {1};

/************************************************************
	Detect other players
************************************************************/
#action {^=P= %*} 
{
	#NOP {Any player detected};
	#var playerFound 1;
	#var otherPlayer %0;

	#NOP {Non party member detected};
	#var simplifiedParty $party;
	#list simplifiedParty simplify;
	#var isInParty 0;
	#foreach {$simplifiedParty} {partyMember} 
	{
		#REGEX {%0} {$partyMember} {#var isInParty 1}
	};
	
	#if { !${isInParty} }
	{
		#var nonPartyPlayerFound 1;
	}

	.triggerEvent onPlayerFound;
} {6};

/************************************************************
	Detect hostile aggro
************************************************************/
#action {%1 charges forward to attack.%*}
{
	#var playerAttacked 1;
	#var attackedBy %1;
	.triggerEvent onPlayerAttacked;
}

/************************************************************
	Detect hostile aggro
************************************************************/
#action {%1 arrives hunting%*}
{
	#var attackedBy %1;
	#var playerAttacked 1;
	.triggerEvent onPlayerAttacked;
};

/*************************************************************
	On room seen
*************************************************************/
#action {^=S=}
{
	.triggerEvent onRoomSeen;
};

/************************************************************
	Detect hostile aggro
************************************************************/
#action {%1 attacking you.%*}
{
	#var attackedBy %1;
	#var playerAttacked 1;
	.triggerEvent onPlayerAttacked;
};

/************************************************************
	Detect a failed attack, most likely due to misspelled
	target names... 
************************************************************/
#action {^There is no %1 here.$}
{
	#var failedAttack %1;
	.triggerEvent onFailedAttack;
};

/************************************************************
	Player followed someone
************************************************************/
#action {%w leaves following %w\.}
{
	#format {whichPlayer} {%l} {%1};
	#format {otherPlayer} {%2} {%2};

 	#if { "$whichPlayer" == "$ourCharacter" && "$otherPlayer == $follower" }
	{
		.triggerEvent onFollowerFollowed;
	};
};

/************************************************************
 	Detect a follower leaving the room
************************************************************/
#action {%1 leaves %2\.} 
{
	#format {whichPlayer} {%l} {%1};
	
	#if { "$whichPlayer" == "$following" }
	{
		#var followDirection %2;

		#switch {"$followDirection"} 
		{
			#case {"north"}			{#var followDirection n};
			#case {"south"}			{#var followDirection s};
			#case {"east"}			{#var followDirection e};
			#case {"west"}			{#var followDirection w};
			#case {"down"}			{#var followDirection d};
			#case {"up"}			{#var followDirection u};
			#case {"northeast"} 		{#var followDirection ne};
			#case {"northwest"}		{#var followDirection nw};
			#case {"southeast"}		{#var followDirection se};
			#case {"southwest"}		{#var followDirection sw};
			#case {"through the portal"}	{#var followDirection enter portal};
			#default 	#var followDirection %2
		};

		.triggerEvent onFollowerLeft;
	};
};

/************************************************************
	Detect wimpy
************************************************************/
#action {^Your legs run away with you %w.} 
{
	#var wimpyDirection %1;

	.triggerEvent onWimpy;
};

/*************************************************************
  Detect unfollowing someone
*************************************************************/
#action {^You are no longer following %w\.} 
{
	#if {"%1" == "$following"} 
	{
		#unvar following
	}

	.triggerEvent onPlayerUnfollowed;
};

/************************************************************
 	Detect Following someone
************************************************************/
#action {^%w begins to follow %w\.} 
{
	#format {whichPlayer} {%l} {%1};
	#if {"$whichPlayer" == "$ourCharacter"} 
	{
		#var {following} {%2}
	}

	.triggerEvent onPlayerFollowed;
};

/*************************************************************
	Detect blocked exits in general. 
*************************************************************/
#action {^You cannot go } 
{
	.triggerEvent onFailedMovement;

};

/*************************************************************
 	Detect blocked exits in general. 
*************************************************************/
#action {^You cannot get it up.} 
{
	.triggerEvent onFailedMovement;
};

/*************************************************************
    Detect item taken
*************************************************************/
#action {%1: Taken.$}
{
    #REGEXP {%1} {coins} { #NOP {nothing};} 
    {
		#var itemTaken %1;
		removeItemFromList {items} $itemDropped;
		.triggerEvent onItemTaken;
    };
};

/*************************************************************
    Detect item taken
*************************************************************/
#action {%1: Ok.$}
{
    #REGEXP {%1} {gold coins} { #NOP {nothing}; } 
    {
		#var itemTaken %1;
		removeItemFromList {items} {$itemDropped};
		.triggerEvent onItemTaken;
    };
};

/*************************************************************
    Detect item dropped
*************************************************************/
#action {^You drop %1.$}
{
    #REGEXP {%1} {gold coins} { #NOP {nothing};} 
    {    
		#var itemDropped %1;
		#list {items} {ADD} {$itemDropped};
		.triggerEvent onItemDropped;
    };
};

/*************************************************************
    Detect item dropped
*************************************************************/
#action {drop: %1$}
{
	#var itemDropped %1;
	#list {items} {ADD} {$itemDropped};
	.triggerEvent onItemDropped;
};

/*************************************************************
	Helper call, when we look at something or glance
	we want to clear what we know about the world, since
	what we are about to see will be a better truth than 
	what we have seen in the past.
*************************************************************/
#alias {.clearData}
{
	#list items clear;
	#var shouldKill {};
	#var otherPlayerFound 0;
	#var playerFound 0;
	#var goldFound 0;
	#var itemFound 0;
	#var mobFound 0;
	#var playerAttacked 0;
	#var otherPlayer {};
	#var foundMobName {};
};

/*************************************************************
 TinTin Events, redraw the map when the map data changes
*************************************************************/
#alias {onEnteredRoomBotResponder} 
{
	.clearData;
};

/*************************************************************
 TinTin Events, redraw the map when the map data changes
*************************************************************/
#alias {onExitedRoomBotResponder} 
{
	.clearData;
};

/************************************************************
 We received a prompt
************************************************************/
#alias onPromptBotResponder
{
	#if { $shouldVacuum && !$playerFound } 
	{
		.doBehaviorVacuum;
	};
};

/************************************************************
	Vacuum
************************************************************/
#alias .doBehaviorVacuum
{
	#if { $goldFound }
	{
		#send !get coins;
		#var goldFound 0;
	};

	#if { $itemFound }
	{
		#send !get all;
		#var itemFound 0;
	};
};

/************************************************************
	Default behaviors for various events
************************************************************/
#alias onKilledMobBotResponder
{
	#if { !$playerFound }
	{
		#if { $shouldLoot }
		{
			#send take all from corpse;
			#send take coins from corpse;
		};
	
		#if { $shouldProcessCorpse }
		{
			#send wrap;
		};
    
		#if { $shouldLoot }
		{
			#send get coins;
			#var goldFound 0;
		};
	}
};

/************************************************************
	Maybe another player picked them up or they got reset
	between the time we saw them and the time we tried to 
	get them. Update our flag
************************************************************/
#action {There is no coins here.}
{
	#var goldFound 0;
}
/************************************************************
	If we are looking and glancing, lets not waste an 
	opportunity to clear our data
************************************************************/
#alias {glance}
{
	.clearData;
	#send !glance;
};

#alias {gl}
{
	glance;
};

#alias {look}
{
	.clearData; 
	#send !look;
};

#alias {ls%*}
{
	look;
};

#alias {l}
{
	look;
};

#alias {dogtank} {#alias {kill} {#delay {2} {dog sicem %%0}}}
#alias {nodogtank} {#unalias {kill}};

#var halt 2

#class {bot} {close}
