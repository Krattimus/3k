#showme READING Logger.TIN
#class {logger} {open}

#var logger[isLogging] 0;
#var logger[recording] 0;
#list logger[items] create;
#list logger[input] create;

.registerEvent onMobKilled onMobKilledLogger;
.registerEvent onItemTaken onItemTakenLogger;
.registerEvent onReceivedInput onReceivedInputLogger;	

/*************************************************************************
	Input recorder
*************************************************************************/
#alias onReceivedInputLogger
{
	#if { $logger[recording] }
	{
		#if { !@containsNoCase{{$event[input]} {.recordOff} }}
		{
			#list logger[input] {add} {$event[input]};
		};
	};
};

/*************************************************************************
	Start recording
*************************************************************************/
#alias .recordOn
{
	#var logger[recording] 1;
	#list logger[input] {clear};
};

/*************************************************************************
	Stop recording
*************************************************************************/
#alias .recordOff
{
	#var logger[recording] 0;
};

/*************************************************************************
	History commend
*************************************************************************/
#alias .history
{
	#if { "%1" == "" }
	{ #history get {logger[input]} 1 25; };
	#else
	{ #history get {logger[input]} 1 %1; };
	
	.describeRecordingAsMacro;
	#var logger[recording] 0;
};


/*************************************************************************
	Show the last recording
*************************************************************************/
#alias .describeRecordingAsMacro
{
	#var recording {};
	#foreach {*logger[input][]} {index}
	{
		#if { "$recording" == "" }
		{
			#var recording $logger[input][$index];
		};
		#else
		{
			#var recording {$recording\;$logger[input][$index]};
		};
	};

	#draw Yellow scroll line 1 1 1 80;
	#showme <048>$recording<088>;
	#draw Yellow scroll line 1 1 1 80;
};

/*************************************************************************
	Shows recording, 1 line at a time
*************************************************************************/
#alias .describeRecording
{
	#draw Yellow scroll line 1 1 1 80;
	#foreach {*logger[input][]} {index}
	{
		#showme <048>$logger[input][$index]<088>;
	};
	#draw Yellow scroll line 1 1 1 80;
};

/*************************************************************************
	Auto log locations & Descriptions of all items grabbed
*************************************************************************/
#alias onItemTakenLogger
{
	#if { $allowRecording && !$patroller[isPatrolling] && $settings[shouldLog] }
	{
		#if { !@containsNoCase{{%0}{coins}} && !@containsNoCase{{%0}{corpse}} }
		{
			#list {logger[items]} {add} {$event[itemTaken]};
			.logItemToDB $event[itemTaken];
		};
	};
};

/**************************************************************
    Auto log mobs when we kill them
**************************************************************/
#alias {onMobKilledLogger}
{
	#var allowRecording 1;
	#delay 1.5 {#var allowRecording 0;};
	.logKillToDatabase;
};





















/**************************************************************
	Describes rooms for the given area
**************************************************************/
#alias {.describeRooms}
{
	#local areaToSearch $area;
	#if { "%0" != "" }
	{
		#local areaToSearch %0;
	};

	#draw Yellow scroll line 1 1 1 80;

	#showme AREATO : $areaToSearch;
	#map list {roomarea} {^$areaToSearch$} {variable} {rooms}; 
	#foreach {*rooms[]} {roomID}  
	{
		#map at $roomID #map get all {roomdata};

		#var exits {};
		#foreach {*roomdata[exits][]} {exit}
		{
			#var exits {$exits $exit};
		};

		#echo {<129>Room<088> [<129>%+5s<088>] %-20.20s <129>%+40.30s <268>%-30.20s<088> %.5s } {$roomID} {[<168>$roomdata[area]<088>]} {$roomdata[name]} {$exits} {$roomdata[symbol]}

	};
	
	#draw Yellow scroll line 1 1 1 80;
};

/**************************************************************
	Describes all mobs in the given area
**************************************************************/
#alias {.describeMobs}
{
	#showme python3 3k/TinTin/Tools/getMobs.py "$area";
	#draw Yellow scroll line 1 1 1 80;
	#script {python3 3k/TinTin/Tools/getMobs.py "$area";};
	#draw Yellow scroll line 1 1 1 80;
};

/**************************************************************
	Describes all items found in a given area
**************************************************************/
#alias {.describeItems}
{
	#showme python3 3k/TinTin/Tools/getItems.py "$area";
	#draw Yellow scroll line 1 1 1 80;
	#script {python3 3k/TinTin/Tools/getItems.py "$area";};
	#draw Yellow scroll line 1 1 1 80;
};

/**************************************************************
    Save the map file of the area to file
**************************************************************/
#alias .describeMap
{
	#local width %1;
	#local height %;

	#if { "%1" == "" }
	{
		#local width 200;
		#local height 200;
	};
	
	#line logmode html #map map $height $width O map.html;
	#map flag asciivnums on;
	#line logmode html #map map $height $width O mapIDs.html;
	#map flag asciivnums off;

	.describeItems;
	.describeMobs;
	.describeInterests;
};

/**************************************************************
	Manual command
**************************************************************/
#alias .noteMob
{
	#send !consider;
	#delay {1} { .logMobToDB {%0}; };
};


/**************************************************************
	Logs whatever "item" at the location you are in
**************************************************************/
#alias {.noteItem}
{
	#list {logger[items]} {add} {%0};
	.logItemToDB %0;
};

/**************************************************************
	Triggers logging process
**************************************************************/
#alias {.logMobToDB}
{
	#var logger[isLogging] 1;
	#var capturedText {NA};
	#var recordedMobName %0;
	#send look at %1;
	.captureFor 2 {onMobDescriptionRead};
};

/**************************************************************
	Triggers logging process
**************************************************************/
#alias {.logItemToDB}
{
	#if { !$logger[isLogging] }
	{
		#var logger[isLogging] 1;
		#var capturedText {NA};
		#var recordedItemName %0;
		#send look at %0;
		.captureFor 2 {onItemDescriptionRead};
	};
};

/**************************************************************
	Send to database
**************************************************************/
#alias {onMobDescriptionRead}
{
	#if { !$patroller[isPatrolling] }
	{
		#script {python3 3k/TinTin/Tools/mobLogger.py "$recordedMobName" "$capturedText" "$currentRoomID" "$area" "$event[rating]"};
		#var logger[isLogging] 0;
		.checkItemBacklog;
	};
};

/**************************************************************
	Send to database
**************************************************************/
#alias {onItemDescriptionRead}
{
	#if { !$patroller[isPatrolling] }
	{
		#script {python3 3k/TinTin/Tools/itemLogger.py "$recordedItemName" "$capturedText" "$currentRoomID" "$area"};
		#var logger[isLogging] 0;

		#list {logger[items]} {delete} {1};
		.checkItemBacklog;
	};
}

#alias .checkItemBacklog
{
	#if { @getNumElements{logger[items]} > 0 }
	{
		.logItemToDB $logger[items][1];
	};
};

/**************************************************************
	Send to database
**************************************************************/
#alias .logKillToDatabase
{
	#if { !$patroller[isPatrolling] }
	{
		#script {python3 3k/TinTin/Tools/mobLogger.py "$event[mobKilled]" "NA" "$currentRoomID" "$area" "$event[rating]"};
	};
};

#class {logger} {close}
