#showme READING Logger.TIN
#class {logger} {open}

#var logger[isLogging] 0;
#var logger[recording] 0;
#list logger[items] create;
#list logger[input] create;

.registerEvent onItemFound onItemFoundLogger;
.registerEvent onMobFound onMobFoundLogger;
.registerEvent onMobKilled onMobKilledLogger;
.registerEvent onItemTaken onItemTakenLogger;
.registerEvent onReceivedInput onReceivedInputLogger;	

/*************************************************************************
	Input recorder
*************************************************************************/
#alias onReceivedInputLogger
{
	#if { $logger[recording] }
	{
		#if { !@containsNoCase{{$event[input]} {.recordOff} }}
		{
			#list logger[input] {add} {$event[input]};
		};
	};
};

/*************************************************************************
	Start recording
*************************************************************************/
#alias .recordOn
{
	#var logger[recording] 1;
	#list logger[input] {clear};
};

/*************************************************************************
	Stop recording
*************************************************************************/
#alias .recordOff
{
	#var logger[recording] 0;
};

/*************************************************************************
	History commend
*************************************************************************/
#alias .history
{
	#if { "%1" == "" }
	{ #history get {logger[input]} 1 25; };
	#else
	{ #history get {logger[input]} 1 %1; };
	
	.describeRecordingAsMacro;
	#var logger[recording] 0;
};


/*************************************************************************
	Show the last recording
*************************************************************************/
#alias .describeRecordingAsMacro
{
	#var recording {};
	#foreach {*logger[input][]} {index}
	{
		#if { "$recording" == "" }
		{
			#var recording $logger[input][$index];
		};
		#else
		{
			#var recording {$recording\;$logger[input][$index]};
		};
	};

	#draw Yellow scroll line 1 1 1 80;
	#showme <048>$recording<088>;
	#draw Yellow scroll line 1 1 1 80;
};

/*************************************************************************
	Shows recording, 1 line at a time
*************************************************************************/
#alias .describeRecording
{
	#draw Yellow scroll line 1 1 1 80;
	#foreach {*logger[input][]} {index}
	{
		#showme <048>$logger[input][$index]<088>;
	};
	#draw Yellow scroll line 1 1 1 80;
};

/*************************************************************************
	Auto log locations & Descriptions of all items grabbed
*************************************************************************/
#alias onItemTakenLogger
{
	#if { $allowRecording && !$patroller[isPatrolling] && $settings[shouldLog] }
	{
		#if { !@isFilteredFromLogging{%0} }
		{
			#list {logger[items]} {add} {$event[itemTaken]};
			.logItemToDB $event[itemTaken];
		};
	};
};

/**************************************************************
    Auto log mobs when we kill them
**************************************************************/
#alias {onMobKilledLogger}
{
	#var allowRecording 1;
	#delay 1.5 {#var allowRecording 0;};
	.logKillToDatabase;
};

/**************************************************************
    Auto logs iotems when we see them
**************************************************************/
#alias {onItemFoundLogger}
{
	#if { $settings[shouldLog] && !$traveller[isTravelling] && !$patroller[isPatrolling] }
	{
		#if { $currentRoomID > 150 }
		{
			#if { !@isFilteredFromLogging{$event[lastItemFound]} }
			{
				.addItemToItemsList {$event[lastItemFound]} {} {$currentRoomID} {$area};
			};
		};
	};
};

/**************************************************************
    Auto log mobs when we 'see'' them, filter out fast travel
	filter out patrols
**************************************************************/
#alias {onMobFoundLogger}
{
	#if { $settings[shouldLog] && !$traveller[isTravelling] && !$patroller[isPatrolling] }
	{
		#if { $currentRoomID > 150 }
		{
			.addMobToMobsList {$event[foundMobName]} {$area} {} {0} {$currentRoomID};
		};
	};
};

/**************************************************************
	Describes rooms for the given area
**************************************************************/
#alias {.describeRooms}
{
	#local areaToSearch $area;
	#if { "%0" != "" }
	{
		#local areaToSearch %0;
	};

	#draw Yellow scroll line 1 1 1 80;

	#showme AREATO : $areaToSearch;
	#map list {roomarea} {^$areaToSearch$} {variable} {rooms}; 
	#foreach {*rooms[]} {roomID}  
	{
		#map at $roomID #map get all {roomdata};

		#var exits {};
		#foreach {*roomdata[exits][]} {exit}
		{
			#var exits {$exits $exit};
		};

		#echo {<129>Room<088> [<129>%+5s<088>] %-20.20s <129>%+40.30s <268>%-30.20s<088> %.5s } {$roomID} {[<168>$roomdata[area]<088>]} {$roomdata[name]} {$exits} {$roomdata[symbol]}

	};
	
	#draw Yellow scroll line 1 1 1 80;
};

/**************************************************************
	Describes all mobs in the given area
**************************************************************/
#alias {.describeMobs}
{
	#draw Yellow scroll line 1 1 1 80;
	#draw Yellow scroll line 1 1 1 80;
};

/**************************************************************
	Describes all items found in a given area
**************************************************************/
#alias {.describeItems}
{
	#draw Yellow scroll line 1 1 1 80;
	
	#draw Yellow scroll line 1 1 1 80;
};

/**************************************************************
    Log rating info
**************************************************************/
#action {This area has %d discovered rooms.}
{
        .addRatingToArea %1;
};


/**************************************************************
    Save the map file of the area to file
**************************************************************/
#alias .describeMap
{
	#local width %1;
	#local height %;

	#if { "%1" == "" }
	{
		#local width 200;
		#local height 200;
	};
	
	#line logmode html #map map $height $width O map.html;
	#map flag asciivnums on;
	#line logmode html #map map $height $width O mapIDs.html;
	#map flag asciivnums off;

	.describeItems;
	.describeMobs;
	.describeInterests;
};

/**************************************************************
	Manual command
**************************************************************/
#alias .noteMob
{
	#send !consider;
	#delay {1} { .logMobToDB {%0}; };
};


/**************************************************************
	Logs whatever "item" at the location you are in
**************************************************************/
#alias {.noteItem}
{
	#list {logger[items]} {add} {%0};
	.logItemToDB %0;
};

/**************************************************************
	Triggers logging process
**************************************************************/
#alias {.logMobToDB}
{
	#var logger[isLogging] 1;
	#var capturedText {NA};
	#var recordedMobName %0;
	#send look at %1;
	.captureFor 2 {onMobDescriptionRead};
};

/**************************************************************
	Triggers logging process
**************************************************************/
#alias {.logItemToDB}
{
	#if { !$logger[isLogging] }
	{
		#var logger[isLogging] 1;
		#var capturedText {NA};
		#var recordedItemName %0;
		#send look at %0;
		.captureFor 2 {onItemDescriptionRead};
	};
};

/**************************************************************
	Send to database
**************************************************************/
#alias {onMobDescriptionRead}
{
	#if { !$patroller[isPatrolling] }
	{
		#draw Yellow scroll line 1 1 1 80;
		#echo {<128>%-25s<088> recorded at [<168>%.5s<088>] in [<168>%-15s<088>]} {$recordedMobName} {$currentRoomID} {$area};
		#draw Yellow scroll line 1 1 1 80;

		.addMobToMobsList {$recordedMobName} {$area} {$capturedText} {0} {$currentRoomID};

		#var logger[isLogging] 0;
		.checkItemBacklog;
	};
};

/**************************************************************
	Send to database
**************************************************************/
#alias {onItemDescriptionRead}
{
	#if { !$patroller[isPatrolling] }
	{
		#draw Yellow scroll line 1 1 1 80;
		#echo {<128>%-25s<088> recorded at [<168>%.5s<088>] in [<168>%-15s<088>]} {$recordedItemName} {$currentRoomID} {$area};
		#draw Yellow scroll line 1 1 1 80;

		.addItemToItemsList {$recordedItemName} {$capturedText} {$currentRoomID} {$area};

		#var logger[isLogging] 0;
		#list {logger[items]} {delete} {1};
		.checkItemBacklog;
	};
};

/**************************************************************
	Handles a queue of items
**************************************************************/
#alias .checkItemBacklog
{
	#if { @getNumElements{logger[items]} > 0 }
	{
		.logItemToDB $logger[items][1];
	};
};

/**************************************************************
	Send to database
**************************************************************/
#alias .logKillToDatabase
{
	#if { !$patroller[isPatrolling] }
	{
		#draw Yellow scroll line 1 1 1 80;
		#echo {<128>%-25s<088> recorded at [<168>%.5s<088>] in [<168>%-15s<088>]} {$event[mobKilled]} {$currentRoomID} {$area};
		#draw Yellow scroll line 1 1 1 80;

		.addMobToMobsList {$event[mobKilled]} {$area} {} {$event[rating]} {$currentRoomID};
	};
};



#function filterOutLongDescription
{
	#var result {%1};

        
        #replace {result} {{┬}} {};
        #replace {result} {{┴}} {};
        #replace {result} {{Zelligar's Headband warms you with a radiant glow.}} {};
        #replace {result} {{There is no suitable corpse here to wrap!}} {};
        #replace {result} {{With a final smack, you end(.*?)life.}} {};
        #replace {result} {{That is not here or it is uninteresting.}} {};
        #replace {result} {{You pick up (.*?) and wrap it}} {};
        #replace {result} {{  (.*?) tells you: (.*?)  }} {};
        #replace {result} {You wrap your arms around yourself.} {};
        #replace {result} {Your great speed allows you to attack again!} {};
        #replace {result} {There is no coins in the corpse.} {};
        #replace {result} {Your great speed allows you to attack again!} {};
        #replace {result} {Electricity crackles through your fingers.} {};
        #replace {result} {{\([0-9]*\) \[[0-9]*\](.*?)\%}} {};
        #replace {result} {{HP(.*?)AE [0-9]+ \[[0-9]+\%\]}} {};
        #replace {result} {{Method:(.*?)AE: [0-9]+/[0-9]+\%}} {};
        #replace {result} {{With a final(.*)life\.}} {};
        #replace {result} {{It doesn't look too heavy.(.*)}} {};
        #replace {result} {{Krat(.*?)Controller: (.*?) }} {};
        #replace {result} {{CB: !}} {};
        #replace {result} {{\[Clan\] (.*?)  }} {};
        #replace {result} {{                  (.*?)  }} { };
        #replace {result} {{                (.*?)  }} { };
        #replace {result} {{              (.*?)  }} { };
        #replace {result} {{            (.*?)  }} { };
        #replace {result} {{   }} { };
        #replace {result} {{^  [0-9]+\%}} {};
        
        #return $result;
};


/*************************************************************************
        Adds rating data to an area. Mostly so if we have an area
        made up of 4-5 subareas, we can associate all the roomcounts
        to the umbrella area

        .addRatingToArea {12} {Ravenloft};

        Results:
            areas[Ravenloft][Ratings] = { {...} {12} };
*************************************************************************/
#alias .addRatingToArea
{
        #var areaData $areas[$area];
        #var ratingsList $areaData[Ratings];

        removeAllItemsFromList {ratingsList} {%1};
        
        #list ratingsList add %1;
        #var areaData[Ratings] $ratingsList;
        #var areaData[Wizard] $wizardName;
        #var areas[$area] $areaData;
};

/*************************************************************************
        Adds an item to the Area data
        Note: We aren't storing detailed information about the mob here.
                This is just so an area can list it's known mobs.
        
                .addItemToAreaList {Sword} {Pinnacle}

        Results in TinTin variable: 

                areas[Pinnacle][Items] = { {...} {Sword} };
*************************************************************************/
#alias .addItemToAreaList
{
        #var itemName %1;
        #var itemArea %2;
        #var areaData $areas[$itemArea];

        #var itemsList $areaData[Items];        
        removeAllItemsFromList {itemsList} {$itemName};

        #list itemsList add $itemName;
        #var areaData[Items] $itemsList;
        #var areas[$itemArea] $areaData;
};

/*************************************************************************
        "$recordedItemName" "$capturedText" "$currentRoomID" "$area"
*************************************************************************/
#alias .addItemToItemsList
{
        #var itemName {%1};
        #var itemDescrition {%2};
        #var itemDescrition @filterOutLongDescription{{$itemDescrition}};
        #var itemRoomID {%3};
        #var itemArea {%4};

		#showme CCCCCC - $itemName;

};

/*************************************************************************
        Add a discovered mob to the Area data         
        Note: We aren't storing detailed information about the mob here.
                This is just so an area can list it's known mobs.
        
                .addMobToAreaList {Rat} {Pinnacle}

        Results in TinTin variable: 

                areas[Pinnacle][Mobs] = { {...} {Rat} };
*************************************************************************/
#alias .addMobToAreaList
{
        #var mobName {%1};
        #var mobArea {%2};
        #var areaData $areas[$mobArea];

        #var mobsList $areaData[Mobs];        
        removeAllItemsFromList {mobsList} {$mobName};

        #list mobsList add $mobName;
        #var areaData[Mobs] $mobsList;
        #var areas[$mobArea] $areaData;
};

/*************************************************************************
        Add a discovered mob from an area
        Note: We separate the area's for collision purposes, and also
                when generating searches, we use Area as a primary key
                for most information
        
                .addMobToMobList {Rat} {Pinnacle} {This is a rat} {17} {32434}

        Results in TinTin variable: 

                mobs[Pinnacle][Rat] = 
                {
                        {Rating}{ {...}{17} }
                        {Rooms}{ {...}{32434} }
                        {Description}{This is a rat}
                }
*************************************************************************/
#alias .addMobToMobsList
{
        #var mobName {%1};
        #var mobArea {%2};
        #var mobDesc {%3};
        #var mobDesc @filterOutLongDescription{{$mobDesc}};
        #var mobRating {%4};
        #var mobRoom {%5};

        #if { !@isFilteredFromLogging{$mobName} }
        {
                #var mobsInArea $mobs[$mobArea];

                #if {{$mobsInArea} === {}}
                {       
                        #var mobsInArea {$mobArea};
                };

                #var mobEntry $mobsInArea[$mobName];

                #if {{$mobEntry} === {}}
                {
                        #var mobEntry {{Ratings}{0}{Rooms}{-1}};
                };

                #if { "$mobDesc" != "" }
                {
                        #var mobEntry[Description] $mobDesc;
                };

                #var ratingsList $mobEntry[Ratings];
                #var roomsList $mobEntry[Rooms];
                
                #if { $mobRating > 0 }
                {
                        removeAllItemsFromList {ratingsList} {$mobRating};
                        #list ratingsList add $mobRating;
                };

                removeAllItemsFromList {roomsList} {$mobRoom};
                #list roomsList add $mobRoom;
                #var mobEntry[Ratings] $ratingsList;
                #var mobEntry[Rooms] $roomsList;
                #var mobsInArea[$mobName] $mobEntry;
                #var mobs[$mobArea] $mobsInArea;

                .addMobToAreaList {$mobName} {$mobArea};
        };
};

#class {logger} {close}
