#showme READING Base.TIN
#class {base} {open}

#action {Leufarr whispers: The watchword is: %1} { #var watchword %1; }
/**************************************************************
	Calculator
**************************************************************/
#var dirs[n] overthere;
#var dirs[s] yonder;
#var dirs[e] overhere;
#var dirs[w] thisway;
#var dirs[u] anotherway;
#var dirs[d] thatway;

#alias {.n} { #send !$dirs[n]; #map move n; };
#alias {.s} { #send !$dirs[s]; #map move s; };
#alias {.e} { #send !$dirs[e]; #map move e; };
#alias {.w} { #send !$dirs[w]; #map move w; };
#alias {.u} { #send !$dirs[u]; #map move u; };
#alias {.d} { #send !$dirs[d]; #map move d; };

/*************************************************************************
	Send ansi settings
*************************************************************************/
#alias .setAnsi
{
	#send aset room_short_pref [33\;1m=S=[0m;
	#send aset room_short_suff [33\;1m=S=[0m;
	#send aset look_monster_pref [36m=M= [0m;
	#send aset look_player_pref [32\;1m=P= [0m;
	#send aset look_weapon_pref [32\;1m=W= [32;1m;
	#send aset look_weapon_suff [0m;
	#send aset look_armor_pref [37\;1m=A= [37;1m;
	#send aset look_armor_suff [0m;
	#send aset look_object [34\;1m=I= [0m;
	#send aset look_other [34\;1m=I= [0m;
	#send aset room_exits_pref [33\;1m=X=[0m;
	#send aset room_exits_suff [33\;1m=X=[0m;
	#send aset kill_pref [41m=K=;
	#send aset kill_suff =K=[0m;
	#send aset xp1 higreen;
	#send aset xp2 hired;
	#send aset xp3 hicyan;
	#send aset xp4 cyan;
}

/*************************************************************************
	Shows mapped directions
*************************************************************************/
#alias .dir
{
	#var exits2 $exits;
	#replace {exits2} {$dirs[n]} {north};
	#replace {exits2} {$dirs[e]} {east};
	#replace {exits2} {$dirs[w]} {west};
	#replace {exits2} {$dirs[s]} {south};
	#replace {exits2} {$dirs[u]} {up};
	#replace {exits2} {$dirs[d]} {down};

	#draw Yellow scroll line 1 1 1 80;
	#showme Exits ($exits2);
	#draw Yellow scroll line 1 1 1 80;
};

/*************************************************************************
	Calculator util
*************************************************************************/
#alias {.calc} 
{
        #math {math} {%1};
        #format {math_format} {%g} {$math};
        #echo $math_format
}

/*************************************************************************
	Captures all text for a period of time
*************************************************************************/
#alias .timedCapture
{
	#var capturedText {};	
	#read 3k/TinTin/Core/CaptureAll.tin;

	#delay {create_capture} 
	{
		#ACTION {%%1} 
		{
			#delay {0} {%2;};
			#CLASS {capture} {kill};
			#UNACTION {%%1};
		} {1};
	} {%1};
};


#var screen[scroll] line;
#list screen[panels] create;
#list screen[sidePanels] create;

/************************************************************
	Lets any .tin class register themselves as a renderable
	panel. They MUST implement an alias called .renderXXXX
	Where XXXX is the name passed into registerPanel
************************************************************/
#alias {.registerPanel}
{
	#list screen[panels] add {%0};
	.showPanel %0;
};

#alias {.registerSidePanel}
{
	#list screen[sidePanels] add {%0};
	.hidePanel %0;
};

#alias {.hidePanel}
{
	#var screen[%0] 0;
};

#alias {.showPanel}
{
	
	
	#foreach {$screen[sidePanels][]} {panel}
	{
		#var screen[$panel] 0;
	};

	#var screen[%0] 1;
};

#function {isOpen}
{
	#return $screen[%0];
};

/************************************************************
	Returns true if there is at least 1 open panel
************************************************************/
#function {hasOpenPanel}
{
	#foreach {$screen[sidePanels][]} {panel} 
	{
		#if { $screen[$panel] }
		{
			#return 1;
		};
	};

	#return 0;
};

/*************************************************************************
	Saves our data to file
*************************************************************************/
#alias {.save}
{
	#var char[currentRoomID] $currentRoomID;
	#var char[area] $area;
	#class chatvar write 3k/TinTin/Data/3kchat.var;
	#class farmvar write 3k/TinTin/Data/KnownFarms.var;	
	#class pubvar write 3k/TinTin/Data/KnownPubs.var;
	#class shopvar write 3k/TinTin/Data/KnownShops.var;
	#class itemsvar write 3k/TinTin/Data/KnownItems.var;
	#class mobsvar write 3k/TinTin/Data/KnownMobs.var;
	#class areasvar write 3k/TinTin/Data/KnownAreas.var;
	#class notessvar write 3k/TinTin/Data/KnownNotes.var;
	#class charvar write 3k/TinTin/Data/Character.var;
};

/*************************************************************************
	Switches to a new guild or character:
	.switchTo Monk Krat
*************************************************************************/
#alias {.switchTo}
{
        #var char[guild] %1;
        #var char[ourCharacter] %2;
        .save;
        #end;
};

/*************************************************************************
	Captures all text for a period of time... 
*************************************************************************/
#alias .captureFor 
{
	#class inventoryhelper kill;

	#var capturedText {};	
	#read 3k/TinTin/Core/CaptureAll.tin;
	#delay {backup_kill}
	{
		#CLASS {capture} {kill};
		#delay {0} {%2;};
	} {%1};
};

/*************************************************************************
	Captures all text until a grep is matched
*************************************************************************/
#alias .captureUntil
{
	#class inventoryhelper kill;

	#var capturedText {};	
	#read 3k/TinTin/Core/CaptureAll.tin;
	#delay {backup_kill}
	{
		#UNACTION {%1};
	} {2};

	#delay {create_capture} 
	{
		#ACTION {%1} 
		{
			#delay {0} {%2;};
			#CLASS {capture} {kill};
			#UNACTION {%1};
		} {1};
	} {0};
};

/*************************************************************************
	Quickly reloads everything in the test bin
*************************************************************************/
#alias .testBin7
{
	#class {testbin} {kill};
	#read 3k/TinTin/Core/TestBin.tin;
};

/**************************************************************
        Renders the display
**************************************************************/
#alias {.render}
{
        #read 3k/TinTin/Core/Draw.tin;
};

/**************************************************************

**************************************************************/
#alias {.onLoadCompleted}
{
        #showme ON LOAD COMPLETE;
        .render;
};

/**************************************************************
	Search look, calls both
**************************************************************/
#alias {sl %0} 
{
	#send look at %0;
	#send search %0;
};

/**************************************************************
	Search Room Nouns (built by MIP)
**************************************************************/
#alias {sn} 
{
	#var noun_cnt &{nouns[]};
	#loop 1 &{nouns[]} cnt 
	{
		#showme Searching Noun [$nouns[$cnt]];
		look at $nouns[$cnt];
		search $nouns[$cnt];
	};
	#delay 0.5 
	{
		#if {$noun_cnt < &{nouns[]}} 
		{
			#echo {<128>New items found!  Search again!<088>}
		}
	}
};

#alias {.cls}
{
    #buffer clear;
    .render;
};

#class {base} {close}
