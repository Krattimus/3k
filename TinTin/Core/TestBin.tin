#showme READING testbin.TIN
#class {testbin} {open}


/**************************************************************
	Lists rooms that haven't been explicitly marked explored
		Use: .describeUnexplored <areaname>
		Where areaname matches the rating command.
**************************************************************/
#alias {.mapSetExplored}
{
	#local areaToSearch $area;
	#if { "%0" != "" }
	{
		#local areaToSearch %0;
	};
	
	#map list {roomarea} {^$areaToSearch$} {variable} {rooms}; 
	#draw Yellow scroll line 1 1 1 80;
	#var totalRooms @getNumElements{rooms};
	#var exploredRooms 0;
	
	#foreach {*rooms[]} {roomID}  
	{
		#map get all {roomdata} $roomID;
                #map at $roomID #map set roomid 1;

                #math {exploredRooms} {$exploredRooms+1};

                #var exits {};
                #foreach {*roomdata[exits][]} {exit}
                {
                        #var exits {$exits $exit};
                };


                #echo {<129>Room<088> [<129>%+5s<088>] %-20.20s <129>%+40.30s <268>%.30s<088> %.5s } {$roomID} {[<168>$roomdata[area]<088>]} {$roomdata[name]} {$exits} {$roomdata[symbol]}
	};
	
	#draw Yellow scroll line 1 1 1 80;
	#showme Left to explore [$exploredRooms] out of [$totalRooms];
};


/**************************************************************
	Describes rooms for the given area
**************************************************************/
#alias {.describeRoomsHtml}
{
	#local areaToSearch $area;
	#if { "%0" != "" }
	{
		#local areaToSearch %0;
	};

	#draw Yellow scroll line 1 1 1 80;

        #showme <table>;
	#showme AREATO : $areaToSearch;
	#map list {roomarea} {^$areaToSearch$} {variable} {rooms}; 
	#foreach {*rooms[]} {roomID}  
	{
		#map at $roomID #map get all {roomdata};

		#var exits {};
		#foreach {*roomdata[exits][]} {exit}
		{
			#var exits {$exits $exit};
		};

		#showme <tr><td>$roomdata[name]</td><td>$roomdata[area]</td><td>$exits</td><td>$roomdata[symbol]</td></tr>;
	};
	#showme </table>;
	#draw Yellow scroll line 1 1 1 80;
};




#alias {.mapUnexploredRooms}
{
	#map list {roomname} {%*} {variable} {rooms}; 
	#draw Yellow scroll line 1 1 1 80;
	#var totalRooms @getNumElements{rooms};
	#var exploredRooms 0;
	
	#foreach {*rooms[]} {roomID}  
	{
		#map get all {roomdata} $roomID;
		
                #if { $roomID < %1 }
                {
                        #continue;
                };

                #if { "$roomdata[name]" == "" }
                {
                        #continue;
                };

		#if { $roomdata[id] == 1 }
		{
			#nop { DO NOTHING };
		};
		#else
		{
			#math {exploredRooms} {$exploredRooms+1};

			#var exits {};
			#foreach {*roomdata[exits][]} {exit}
			{
				#var exits {$exits $exit};
			};


			#echo {<129>Room<088> [<129>%+5s<088>] %-20.20s <129>%+40.30s <268>%.30s<088> %.5s } {$roomID} {[<168>$roomdata[area]<088>]} {$roomdata[name]} {$exits} {$roomdata[symbol]};

			#if { $exploredRooms > 50 }
			{
				#break;
			};
		};

	};
	
	#draw Yellow scroll line 1 1 1 80;
	#showme Left to explore [$exploredRooms] out of [$totalRooms];
};




#action {Raest leaves %1\.} 
{ 
        #var event[followDirection] %1;

        #switch {"$event[followDirection]"} 
        {
                #case {"north"}			{#var event[followDirection] n};
                #case {"south"}			{#var event[followDirection] s};
                #case {"east"}			{#var event[followDirection] e};
                #case {"west"}			{#var event[followDirection] w};
                #case {"down"}			{#var event[followDirection] d};
                #case {"up"}			{#var event[followDirection] u};
                #case {"northeast"} 	{#var event[followDirection] ne};
                #case {"northwest"}		{#var event[followDirection] nw};
                #case {"southeast"}		{#var event[followDirection] se};
                #case {"southwest"}		{#var event[followDirection] sw};
                #case {"through the portal"}	{#var event[followDirection] enter portal};
                #default 	#var event[followDirection] %1
        };

        #map move $event[followDirection]; 
} {1};

#alias .tt2
{
        #var patrol[shouldKillList] 
        {
                {archer}{archer}
                {banshee}{banshee}
                {basilisk}{basilisk}
                {benevolent wizard}{wizard}
                {djinni}{djinni}
                {dragon}{dragon}
                {evil looking changeling}{changeling}
                {evil looking juggernaut}{juggernaut}
                {evil looking angel}{angel}
                {evil sorceress}{sorceress}
                {goblin}{goblin}
                {knight}{knight}
                {manticore}{manticore}
                {stone golem}{golem}
                {troll}{troll}
                {unicorn}{unicorn}
                {valkyrie}{valkyrie}
        };

        #foreach {*patrol[shouldKillList][]} {index}
        {
                #REGEXP {"%0"} {"%*$index%*"} { #var patroller[shouldKill] $patrol[shouldKillList][$index]; };
        };

};


#alias .mapSetRoom
{
        #list maze add 39456;
        #list maze add 39457;
        #list maze add 39460;
        #list maze add 39478;
        #list maze add 39474;
        #list maze add 39464;
        #list maze add 39471;
        #list maze add 39468;
        #list maze add 39463;
        #list maze add 39462;
        #list maze add 39469;
        #list maze add 39461;
        #list maze add 39476;
        #list maze add 39479;
        #list maze add 39477;
        #list maze add 39480;
        #list maze add 39473;
        #list maze add 39466;
        #list maze add 39475;
        #list maze add 39483;
        
        #map go $maze[+%1];
        #map link %2 $maze[+%3];
	#map go $maze[+%3];
};


/**************************************************************
        See if we can locate ourselves on the map
**************************************************************/
#alias {findme} 
{
        #map go $room ($exits);
};

/**************************************************************
	See if we can list all nouns in a string with a natural
	language parser. Obviously this is hit or miss	
**************************************************************/
#alias {nouns} 
{
    #script {python3 3k/TinTin/Tools/nountest.py "$roomdesc"};
};


#class {testbin} {close}
