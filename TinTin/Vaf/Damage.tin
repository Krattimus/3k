#class {damage} {open}

/*************************************************************************
	Using the numbers vaf, track and record damage data
*************************************************************************/

/*************************************************************************
	Resets variables as combat starts to record before combat ends
*************************************************************************/
#alias {resetDamage}
{
	#var dmg[roundID] 0;
	#var dmg[numberOfRounds] 0;
	#var dmg[maxHit] 0;
	#var dmg[minHit] 0;
	#var dmg[currentHit] 0;
	#var dmg[damageThisRound] 0;
	#var dmg[averageDamage] 0;
	#var dmg[totalDamage] 0;
	#var dmg[palm] 0;
	#var dmg[brawler] 0;
	#var dmg[pressure] 0;
	#var dmg[scaler] 0;
	#var dmg[totalHits] 0;
	#var dmg[insight] 0;
	#var dmg[mob] {};
}

#gag {Electricity crackles through your fingers.};
#gag {You take an instant to gather your thoughts, clear your mind%*};
#gag {You quickly tumble to avoid the brunt of the attack.};
#gag {You lay hands upon yourself and feel healed.};
#gag {With skill and speed you dodge the attack!};
/*************************************************************************
	Highlight 
*************************************************************************/
#sub {You hit %* %d time%*for %d damage.} {<088> You hit %1 %2 time%3for <118>%4<088> damage.}

/*************************************************************************
	Detect assassin perk
*************************************************************************/
#action {A flash of insidious insight strikes you!}
{
	#var dmg[insight] 1;
};

/*************************************************************************
	Detect brawler perk
*************************************************************************/
#action {You enter a state of unarmed frenzy!}
{
	#var dmg[brawler] 1;
};

/*************************************************************************
	Monster killed
	#NOP { #delay {0.1} {.miniReport}; };
*************************************************************************/
#alias {onMobKilledDamage}
{

};	

/*************************************************************************
	Mob was attacked
*************************************************************************/
#alias {onMobAttackedDamage}
{
	#map get {roomvnum} {currentRoom};
	#var dmg[currentRoom] $currentRoom;
	resetDamage;

	#if { "$patroller[shouldKill]" != "" }
	{
		#var event[mobAttacked] $patroller[shouldKill];
	};

	#var dmg[mob] $event[mobAttacked];
};


/*************************************************************************
	A mob was spawned
*************************************************************************/
#alias onMobSpawnedDamage
{
	resetDamage;
};

/*************************************************************************
	Main damage parser
*************************************************************************/
#action {You hit %* %d time%*for %d damage.} 
{
	#NOP Set current hit dmg;
	#var currentHit %4;
	#var hitCount %2;

	#NOP Determine if this is an additional dmg msg for the same or different rnd;
	#if {$dmg[roundID] == $mip[round]} 
	{
		#NOP Additional dmg msg in same rnd, add to rnd total;
		#math {dmg[damageThisRound]} {$dmg[damageThisRound] + $currentHit};
		#math {dmg[totalHits]} {$dmg[totalHits] + $hitCount};
	};
	#else
	{
		#NOP Current rnd differs from previous round;
		#NOP Set current rnd to rnd counter from MIP and increment total rnds;
		#math {dmg[numberOfRounds]} {$dmg[numberOfRounds] + 1};
		#var dmg[roundID] $mip[round];
		#var dmg[damageThisRound] $currentHit;
		#math {dmg[totalHits]} {$dmg[totalHits] + $hitCount};
	};

	#NOP Determine if min hit;
	#if {$currentHit < $dmg[minHit] || $dmg[minHit] == 0 } 
	{
		#var dmg[minHit] $currentHit;
	};

	#NOP Determine if max hit;
	#if {$currentHit > $dmg[maxHit]} 
	{
		#var dmg[maxHit] $currentHit;
	};

	#NOP Add dmg for current msg to the total;
	#math {dmg[totalDamage]} {$dmg[totalDamage] + $currentHit};

	#NOP Calculate new average;
	#math {dmg[averageDamage]} {$dmg[totalDamage]/$dmg[numberOfRounds]};

	#math {dmg[averagePerHit]} {$dmg[totalDamage]/$dmg[totalHits]};
};

/*************************************************************************
	Displays results 
*************************************************************************/
#alias {.miniReport} 
{
	#echo {<128>%-25s %-10s <168>%-10s <268>%-10s <168>%-10s <268>%-10s <168>%-10s <268>%-10s <168>%-10s <268>%-10s<088> } {Mob} {Rating} {Damage} {Rounds} {Per Round} {Hits} {Per Hit} {Min Hit} {Max Round} {Combat};
	#draw Yellow scroll line 1 1 1 80;

	#math {index} {$damageLogSize-1};
	#var pastDmg $dmg;

	#format {pastDmg[mob]} {%.20s} {$pastDmg[mob]};

	#local combatOptions {};
	#if { $pastDmg[brawler] }
	{
		#local combatOptions {$combatOptions B};
	};
	#else
	{
		#local combatOptions {$combatOptions -};
	};

	#if { $pastDmg[pressure] }
	{
		#local combatOptions {$combatOptions P};
	};
	#else
	{
		#local combatOptions {$combatOptions -};
	};
	#if { $pastDmg[palm] }
	{
		#local combatOptions {$combatOptions P};
	};
	#else
	{
		#local combatOptions {$combatOptions -};
	};

	#echo {<128>%-25s %-10s <168>%-10s <268>%-10s <168>%-10s <268>%-10s <168>%-10s <268>%-10s <168>%-10s <268>%-10s<088> } {$pastDmg[mob]} {$pastDmg[rating]} {$pastDmg[totalDamage]} {$pastDmg[numberOfRounds]} {$pastDmg[averageDamage]} {$pastDmg[totalHits]} {$pastDmg[averagePerHit]} {$pastDmg[minHit]} {$pastDmg[maxHit]} {$combatOptions};
	#draw Yellow scroll line 1 1 1 80;
};

#class {damage} {close}
